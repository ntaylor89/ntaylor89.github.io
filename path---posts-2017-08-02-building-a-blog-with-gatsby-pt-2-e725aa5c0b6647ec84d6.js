webpackJsonp([0x8f2ec33f83cd2800],{"./node_modules/json-loader/index.js!./.cache/json/posts-2017-08-02-building-a-blog-with-gatsby-pt-2.json":function(n,a){n.exports={data:{site:{siteMetadata:{title:"Nate A Taylor",author:"Nate A Taylor"}},markdownRemark:{id:"/Users/nate/Workspace/nate-site/src/pages/posts/08-02-2017---building-a-blog-with-gatsby-js-pt-2/index.md absPath of file >>> MarkdownRemark",html:'<p>If you want to build a personal blog with modern web technologies, <a href="https://www.gatsbyjs.org/">Gatsby</a> is a great choice. But if you’re coming\nfrom tools like Jeckyll, you’ll find that some features don’t work out of the box.</p>\n<p>One such feature is markdown support. In this post, we will:</p>\n<ul>\n<li>Add basic markdown support to Gatsby, allowing you to import a markdown file into any component, and\nset it as inner HTML</li>\n<li>Automatically create blog posts from markdown files in a specific directory.</li>\n</ul>\n<p>If you don’t have a Gatsby project, set one up with <code>gatsby new my-blog</code> and follow along.</p>\n<h2 id="adding-the-plugins-we-need"><a href="#adding-the-plugins-we-need" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding The Plugins We Need</h2>\n<p>Gatsby uses a <a href="https://www.gatsbyjs.org/docs/plugins/">plugin system</a> to add support\nfor new features. But before we add the plugins we need, we need to know how Gatsby’s data layer\nworks, and what these plugins actually do.</p>\n<h3 id="understanding-gatsbys-data-layer"><a href="#understanding-gatsbys-data-layer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Understanding Gatsby’s Data Layer</h3>\n<p>Gatsby has a modular data layer extendable through plugins. Here’s how it works:</p>\n<ul>\n<li>Gatsby searches it’s known sources for data, and adds a <code>gatsby-node</code> to a tree data structure.</li>\n<li>If the data in the node is a data-type Gatsby understands, it will parse it and create a\nchild node.</li>\n<li>Gatsby allows you to query the <code>gatsby-node</code> tree with GraphQL.</li>\n<li>In a component, you export a GraphQL query to specify what data the component needs. The data you query\nis available to your component as a prop.</li>\n</ul>\n<p><code>gatsby-source</code> plugins tell gatsby where to look for data, and <code>gatsby-transformer</code> plugins tell\nGatsby how to use new data-types.</p>\n<p><strong>Note</strong>: GraphQL isn’t actually used in your deployed site. At build time, Gatsby resolves the queries and adds the data to the components.</p>\n<h3 id="telling-gatsby-where-to-find-data"><a href="#telling-gatsby-where-to-find-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Telling Gatsby Where To Find Data</h3>\n<p>We will use the <a href="https://www.gatsbyjs.org/packages/gatsby-source-filesystem/">gatsby-source-filesystem</a>\nplugin to tell Gatsby to look for data in <code>src/pages</code>.</p>\n<p>First install <code>gatsby-source-filesystem</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save gatsby-source-filesystem\n</code></pre>\n      </div>\n<p>Then edit <code>gatsby-config.js</code> to configure it. This config file exports a configuration object.\nAll plugin configurations live in the array under the <code>plugins</code> attribute.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">//...</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      resolve<span class="token punctuation">:</span> <span class="token string">\'gatsby-source-filesystem\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'pages\'</span><span class="token punctuation">,</span>\n        path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/pages`</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This tells Gatsby to look for data in <code>src/pages/</code>. The search is recursive, so it will search\nnested folders. We’ll put all blog posts in <code>src/pages/posts</code> to distinguish them from other\npages. Since we’re talking about it, reate that folder now.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>mkdir src/pages/posts</code></pre>\n      </div>\n<h3 id="telling-gatsby-how-to-parse-markdown"><a href="#telling-gatsby-how-to-parse-markdown" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Telling Gatsby How to Parse Markdown</h3>\n<p>The <a href="https://www.gatsbyjs.org/packages/gatsby-transformer-remark/">gatsby-transformer-remark</a> plugin\ntells Gatsby how to parse Markdown. This plugin wraps the <a href="https://github.com/wooorm/remark">Remark</a> library.</p>\n<p>The plugin will parse markdown into an string of HTML, which we can use to set the inner HTML of an\nexisting element.</p>\n<p>Install <code>gatsby-transfomer-remark</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save gatsby-transformer-remark\n</code></pre>\n      </div>\n<p>And again edit <code>gatsby-config</code> to make Gatsby aware of the plugin.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">//...</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      resolve<span class="token punctuation">:</span> <span class="token string">\'gatsby-source-filesystem\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'pages\'</span><span class="token punctuation">,</span>\n        path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/pages`</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'gatsby-transformer-remark\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Note that we added <code>gatsby-transformer-remark</code> to the list of plugins as a string. Gatsby allows\neither a string or an object in the plugins array. We use an object when we need to give plugin settings.</p>\n<p>Now we can import a markdown file into a component, and use it to set inner HTML. For example…</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> aboutMe <span class="token keyword">from</span> <span class="token string">\'./about-me.md\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> About <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> aboutMe<span class="token punctuation">.</span>html <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3 id="making-remark-work-for-you"><a href="#making-remark-work-for-you" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Making Remark Work For You</h3>\n<p>We now have bare bones markdown support, but we add more plugins to make like easier. Gatsby\nhas many <a href="https://www.gatsbyjs.org/docs/plugins/#official-plugins">useful plugins</a> for remark,\nbut for now we’ll just add three:</p>\n<ul>\n<li><a href="https://www.gatsbyjs.org/packages/gatsby-remark-copy-linked-files/">gatsby-remark-copy-linked-files</a>: Auto copies referenced files (images, pdfs, etc) to the static directory at build time</li>\n<li><a href="https://www.gatsbyjs.org/packages/gatsby-remark-smartypants/">gatsby-remark-smartypants</a>: Convert ASCII punctuation into HTML characters</li>\n<li><a href="https://www.gatsbyjs.org/packages/gatsby-remark-images/">gatsby-remark-images</a>: Lets you use images in markdown</li>\n</ul>\n<p>First install them:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save gatsby-remark-images gatsby-remark-copy-linked-files gatsby-remark-smartypants\n</code></pre>\n      </div>\n<p>Then add them to <code>gatsby-config.js</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">//...</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      resolve<span class="token punctuation">:</span> <span class="token string">\'gatsby-source-filesystem\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'pages\'</span><span class="token punctuation">,</span>\n        path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/pages`</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment" spellcheck="true">// The config for `gatsby-transformer-remark` is now an object</span>\n    <span class="token punctuation">{</span>\n      resolve<span class="token punctuation">:</span> <span class="token string">\'gatsby-transformer-remark\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// This plugin has plugins!</span>\n        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            resolve<span class="token punctuation">:</span> <span class="token string">\'gatsby-remark-images\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              maxWidth<span class="token punctuation">:</span> <span class="token number">590</span> <span class="token comment" spellcheck="true">// You must specify some value here</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'gatsby-remark-copy-linked-files\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'gatsby-remark-smartypants\'</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Note that we nested each new plugin under the config for <code>gatsby-transformer-remark</code>. Each of these\nnew plugins are plugins for <code>gatsby-transformer-remark</code>. That’s right, plugins can have plugins.</p>\n<h2 id="creating-pages-from-markdown-posts"><a href="#creating-pages-from-markdown-posts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating Pages from Markdown Posts</h2>\n<p>Now that basic markdown support is in place, we can tell Gatsby how to create pages from the markdown files that live in the <code>src/pages/post</code> directory.</p>\n<p>This requires a few steps</p>\n<ul>\n<li>Make a template to use for each page</li>\n<li>Tell <code>gatsby-node</code> to create the pages using the template</li>\n<li>Add an index page for the posts</li>\n</ul>\n<h3 id="creating-a-slug"><a href="#creating-a-slug" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a Slug</h3>\n<p>First we’ll create a “slug” for each post based on the date and title in the frontmatter. So if we have this\nfront matter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-md"><code>---\ntitle: "First Post"\ndate: "2017-08-01"\n---</code></pre>\n      </div>\n<p>Then the slug will be <code>2017/08/01/first-post</code>. Later, we’ll use this slug as the route to each post.</p>\n<p>We can create this slug when Gatsby creates the <code>gatsby-node</code>. If the file <code>gatsby-node.js</code> does not\nexist in the top level of your project, create it. Then add this code.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment" spellcheck="true">// Create a jeckyll like blog post path.</span>\n<span class="token comment" spellcheck="true">// i.e., if the date is "08-01-2017", and the title is "Welcome",</span>\n<span class="token comment" spellcheck="true">// then the path will be "/posts/2017/08/02/welcome"</span>\n<span class="token keyword">function</span> <span class="token function">getSlug</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span>date<span class="token punctuation">,</span> title<span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>frontmatter\n\n  title <span class="token operator">=</span> title<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/ /g</span><span class="token punctuation">,</span> <span class="token string">\'-\'</span><span class="token punctuation">)</span>\n  date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">\'/\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// `onCreateNode` gets called for every node created</span>\nexports<span class="token punctuation">.</span>onCreateNode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> node<span class="token punctuation">,</span> boundActionCreators<span class="token punctuation">,</span> getNode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createNodeField <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators\n\n  <span class="token comment" spellcheck="true">// Add the slug if the node is a markdown node</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>internal_type <span class="token operator">===</span> <span class="token string">\'MarkdownRemark\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> slug <span class="token operator">=</span> <span class="token function">getSlug</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    <span class="token function">createNodeField</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      node<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'slug\'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> slug\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Now every markdown node will have a <code>slug</code> value in it’s <code>fields</code> attribute.</p>\n<h3 id="creating-a-post-template"><a href="#creating-a-post-template" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a Post Template</h3>\n<p>Next we need a template to use for each post. This template is a React component like any other\npage. We’ll put it in a <code>src/templates/</code> folder.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>mkdir src/templates\ntouch src/templates/post.js</code></pre>\n      </div>\n<p>Now put this code in the <code>src/templates/post.js</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> PostTemplate <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> post <span class="token operator">=</span> props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>markdownRemark\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>date<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> post<span class="token punctuation">.</span>html <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> pageQuery <span class="token operator">=</span> graphql<span class="token template-string"><span class="token string">`\n  query PostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      frontmatter {\n        title\n        summary\n        tags\n        date(formatString: "MMMM DD, YYYY")\n      }\n    }\n  }\n`</span></span>\n</code></pre>\n      </div>\n<p>Notice the <code>export const pageQuery</code> at the bottom of this page. Later, when we use this template, the\ncaller will pass in the slug. The template uses the slug to query the data it needs for the matching post.</p>\n<p>The query calls <code>markdownRemark</code> to find a single markdown <code>gatsby-node</code>, and then passes the data\ninto the component. We can then access the data from the props via <code>props.data.markdownRemark</code>.</p>\n<h3 id="building-the-pages"><a href="#building-the-pages" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Building the Pages</h3>\n<p>With the template in place, let’s build the pages. Add this snippet to the bottom of <code>gatsby-node.js</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>exports<span class="token punctuation">.</span>createPages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> postTemplate <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src/templates/post.js\'</span><span class="token punctuation">)</span>\n\n    <span class="token comment" spellcheck="true">// Fetch all markdown nodes</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>\n      <span class="token function">graphql</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token string">`{\n          allMarkdownRemark(\n            limit: 1000,\n            filter: {\n              frontmatter: {\n                draft: { ne: false },\n                title: { ne: null },\n                date: { ne: null }\n              }\n            }\n          ) {\n\n          }\n        }`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>allMarkdownRemark<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>edge <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n          <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            path<span class="token punctuation">:</span> edge<span class="token punctuation">.</span>node<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>slug<span class="token punctuation">,</span>\n            component<span class="token punctuation">:</span> postTemplate<span class="token punctuation">,</span>\n            context<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              <span class="token comment" spellcheck="true">// this is where we pass the slug to the template</span>\n              slug<span class="token punctuation">:</span> edge<span class="token punctuation">.</span>node<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>slug\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>We export a <code>createPages</code> function, which Gatsby passes helpers into. These helpers let us query\nGraphQL and create pages.</p>\n<p>Now all posts are available at their paths.</p>\n<h2 id="creating-an-post-index"><a href="#creating-an-post-index" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating an Post Index</h2>\n<p>Now that we have individual posts available, we can add an index page. Add the following code to\n<code>src/pages/posts.js</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">\'gatsby-link\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> PostIndex <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> posts <span class="token operator">=</span> props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>allMarkdownRemark<span class="token punctuation">.</span>edges\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>post <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>node<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>slug<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n              <span class="token punctuation">{</span>post<span class="token punctuation">.</span>node<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>title<span class="token punctuation">}</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>subTitle<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>\n            <span class="token punctuation">{</span>props<span class="token punctuation">.</span>summary<span class="token punctuation">}</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> pageQuery <span class="token operator">=</span> graphql<span class="token template-string"><span class="token string">`\n  query PostIndexQuery {\n    allMarkdownRemark(\n      limit: 1000,\n      sort: { fields: [frontmatter___date], order: DESC },\n      filter: { frontmatter: { draft: { ne: true } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: "MMMM DD, YYYY")\n          }\n        }\n      }\n    }\n  }\n`</span></span>\n</code></pre>\n      </div>\n<p>Because this file lives in <code>src/pages</code> and exports a component, Gatsby will:</p>\n<ol>\n<li>Pass this component into our layout in <code>src/layouts/index.html</code></li>\n<li>Make it available at a route based on the file name (in this case, <code>/posts</code>)</li>\n</ol>\n<p>Note that we export a graphql query again. You can do this from any component that needs data from\n<code>gatsby-node</code>.</p>\n<p>And that should do it! Some final tips:</p>\n<ul>\n<li>If you import external resources into a markdown file, then create a new folder under <code>src/pages/posts</code>\nfor the put all revevant media there.</li>\n<li>There are more official gatsby-remark plugins available at the site.</li>\n</ul>',
frontmatter:{title:"Building a Blog with Gatsby Pt 2",summary:"Setup Gatsby to automatically turn markdown files into blog posts",tags:["Gatsby","JavaScript","React","Tutorial"],date:"August 02, 2017"}}},pathContext:{slug:"/posts/2017/08/02/building-a-blog-with-gatsby-pt-2/"}}}});
//# sourceMappingURL=path---posts-2017-08-02-building-a-blog-with-gatsby-pt-2-e725aa5c0b6647ec84d6.js.map